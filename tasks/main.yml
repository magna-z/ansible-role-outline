---
- name: ensure group
  ansible.builtin.group:
    name: outline
    system: true
  register: _outline_group

- name: ensure user
  ansible.builtin.user:
    name: outline
    group: outline
    shell: /sbin/nologin
    home: /var/lib/outline
    create_home: false
    system: true
  register: _outline_user

- name: ensure data directory
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: "{{ _outline_user.uid }}"
    group: "{{ _outline_group.gid }}"
    mode: "0750"
  loop: [/var/lib/outline]

- name: database migrate
  community.docker.docker_container:
    detach: false
    cleanup: true
    network_mode: host
    command: yarn db:migrate --env=production-ssl-disabled
    name: outline-database-migrate
    image: "{{ outline_docker_image }}"
    user: "{{ _outline_user.uid }}:{{ _outline_group.gid }}"
    env: "{{ outline_docker_envs }}"

- name: ensure systemd outline.service
  notify: restart service outline
  ansible.builtin.copy:
    dest: /etc/systemd/system/outline.service
    owner: root
    group: root
    mode: "0644"
    content: |
      [Unit]
      Requires=docker.service
      After=docker.service
      StartLimitIntervalSec=0
      [Service]
      ExecStartPre=-/usr/bin/docker rm --force %N
      ExecStart=/usr/bin/docker run \
        --name=%N \
        --rm=true \
        --pid=host \
        --log-driver=none \
        --stop-timeout=60 \
        --user={{ _outline_user.uid }}:{{ _outline_group.gid }} \
        --network={{ outline_docker_network }} \
      {% if outline_docker_network != 'host' %}{% for publish in outline_docker_publish_ports %}
        --publish={{ publish }} \
      {% endfor %}{% endif %}
      {% if outline_docker_envs | length > 0 %}{% for key, value in outline_docker_envs.items() %}
        --env={{ key }}="{{ value }}" \
      {% endfor %}{% endif %}
      {% if outline_docker_labels | length > 0 %}{% for key, value in outline_docker_labels.items() %}
        --label={{ key }}="{{ value }}" \
      {% endfor %}{% endif %}
        --volume=/etc/localtime:/etc/localtime:ro \
        --volume=/etc/timezone:/etc/timezone:ro \
        --volume=/var/lib/outline:/var/lib/outline:rw \
        --volume=/etc/ssl/certs:/etc/ssl/certs:ro \
        --volume=/usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro \
        --entrypoint=node \
        {{ outline_docker_image }} build/server/index.js
      ExecStop=/usr/bin/docker stop %N
      Restart=always
      RestartSec=10
      KillMode=process
      [Install]
      WantedBy=multi-user.target

- name: execute handlers
  ansible.builtin.meta: flush_handlers

- name: start service outline
  ansible.builtin.systemd:
    name: outline
    daemon_reload: true
    enabled: true
    state: started

- name: wait outline
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 3000
    timeout: 60
  retries: 5

- name: healthcheck outline
  ansible.builtin.uri:
    url: http://127.0.0.1:3000/
  register: _outline_health
  until: _outline_health.status == 200
  delay: 10
  retries: 5
